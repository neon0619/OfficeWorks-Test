import { createSlice } from '@reduxjs/toolkit';
import { Product } from '../types/productTypes';
import { fetchProductList } from '../services/productList';

// Define the initial state for the productList slice
const initialState: {
  data: Product[];               // An array to hold the list of products
  status: 'idle' | 'loading' | 'succeeded' | 'failed'; // Indicates the status of data loading
  error: string | null;          // Stores any potential error messages
} = {
  data: [],       // Initially, the product data array is empty
  status: 'idle', // The initial status is 'idle,' indicating no data loading or errors
  error: null,    // No errors initially
};

// Create a Redux Toolkit slice for the product list
const productListSlice = createSlice({
  name: 'productList',   // Slice name
  initialState,          // Initial state as defined above
  reducers: {},          // Placeholder for any reducer functions (none in this case)
  extraReducers: (builder) => {
    builder
      // Handle the pending action (data loading in progress)
      .addCase(fetchProductList.pending, (state) => {
        state.status = 'loading';
      })
      // Handle the fulfilled action (data loading succeeded)
      .addCase(fetchProductList.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.data = action.payload; // Update the product data with the fetched data
      })
      // Handle the rejected action (data loading failed)
      .addCase(fetchProductList.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message || 'An error occurred.'; // Store the error message
      });
  },
});

// Export the reducer generated by the slice
export default productListSlice.reducer;
